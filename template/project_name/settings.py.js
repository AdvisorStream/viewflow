/* eslint-env node */
const render = (ctx) => `"""
Django settings for ${ctx.project} project.

Generated by 'npm init django'.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""
${ctx.deploy ? 'import environ': ''}
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve(strict=True).parent.parent
${ctx.deploy ? `
# Configure django-environ to run in dev mode without .env file
env = environ.Env(
    ALLOWED_HOSTS=(list, ['*']),
    DATABASE_URL=(str, 'sqlite:///sqlite.db'),
    DEBUG=(bool, True),
    DOMAIN_NAME=(str, '127.0.0.1'),
    MEDIA_ROOT=(str, BASE_DIR / '.media'),
    SECRET_KEY=(str, '${ctx.secretKey}'),
    STATIC_ROOT=(str, BASE_DIR / '.static'),
)
env.read_env(str(BASE_DIR / '.env')) if (BASE_DIR / '.env').exists() else None
`: `# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/
`}
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ${ctx.deploy ? 'env.str(\'SECRET_KEY\')' : `'${ctx.secretKey}'`}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = ${ctx.deploy ? 'env.bool(\'DEBUG\')' : 'True'}

ALLOWED_HOSTS = ${ctx.deploy ? `env.list('ALLOWED_HOSTS')` : '[]'}

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    ${ctx.rest ? `'rest_framework',
    ` : ''}${ctx.user ? `'${ctx.project}.users',`:''}
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = '${ctx.project}.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = '${ctx.project}.wsgi.application'

# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
${ctx.deploy ? `
DATABASES = {
  'default': env.db(),
}
` : `
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
`}

${ctx.redis ? `
# Cache
# https://docs.djangoproject.com/en/dev/topics/cache/
CACHES = {
  "default": {
      "BACKEND": "django_redis.cache.RedisCache",
      "LOCATION": "redis://127.0.0.1:6379/0",
      "OPTIONS": {
          "CLIENT_CLASS": "django_redis.client.DefaultClient",
      }
  }
}`:''}
${ctx.user ? `
# Auth
# https://docs.djangoproject.com/en/3.0/topics/auth/
AUTH_USER_MODEL = 'users.User'
`:''}

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

${ctx.redis ? `
# Session
# https://docs.djangoproject.com/en/3.0/topics/http/sessions/

SESSION_ENGINE = "django.contrib.sessions.backends.cache"
`:''}

# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Default primary key field type
# https://docs.djangoproject.com/en/dev/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/static/'
${ctx.deploy || ctx.web ? `STATIC_ROOT = env.str('STATIC_ROOT')
STATICFILES_DIRS = [BASE_DIR / 'static']

MEDIA_URL = '/media/'
MEDIA_ROOT = env.str('MEDIA_ROOT')
`: ''}${ctx.deploy ? `

# Logs are captured by gunicorn and goes to systemd
# https://docs.djangoproject.com/en/3.0/topics/logging/
LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'handlers': {
      'console': {
          'class': 'logging.StreamHandler',
      },
  },
  'loggers': {
      'django': {
          'level': 'INFO',
          'handlers': ['console'],
      },
  },
}
`:''}
${ctx.celery ? `
# Celery
# http://docs.celeryproject.org/en/latest/index.html
CELERY_DEFAULT_QUEUE = env.str('DOMAIN_NAME')
CELERY_BROKER_URL = 'redis://localhost:6379/0'`:''}
`.trimLeft();

exports.default = render;
